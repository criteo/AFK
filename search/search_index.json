{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#overview","title":"Overview","text":""},{"location":"#what-is-it","title":"What is it?","text":"<p>At Criteo, we have decided to fully open source our network automation framework.</p> <p>We have called it AFK, which stands for \"Automation Framework for networK\" (yes we are cheating a bit with the \"k\", but why not ). It fits with the idea of being Away From Keyboard while the network configuration is being deployed or updated automatically.</p> <p>It is based on NetBox, OpenConfig, SaltStack, and supports Juniper JunOS, Arista EOS and SONiC.</p> <p>Note</p> <p>If you are using an ad-blocker, this documentation might not work properly as \"Criteo\" is in some links.</p>"},{"location":"#repositories","title":"Repositories","text":"Repository Description Latest commit Network CMDB Network CMDB plugin for Netbox Data aggregation API (coming soon) Aggregate data from CMDB and convert to OpenConfig AFK Salt modules Salt modules to apply configuration from OpenConfig data SONiC Salt Deployer Tool to deploy and configure salt-minion on SONiC devices SONiC SaltStack States/execution modules for SONiC SONiC utilities SONiC scripts used by some SONiC SaltStack modules"},{"location":"#global-design","title":"Global design","text":"<p>Note</p> <p>Our approach to automation is opinionated. There are tons of ways of doing network configuration, and choices must be made.</p> <p>This diagram shows the components of our framework:</p> <pre><code>flowchart TD\n    CMDB[Network CMDB]\n    DAAPI[Data Aggregation API]\n    DEV[Network_Devices]\n    DATASOURCE[Other data source*]\n\n    CMDB --&gt;|raw data| DAAPI\n    DATASOURCE --&gt;|raw data| DAAPI\n    DAAPI --&gt;|openconfig| SaltStack\n    SaltStack --&gt;|configuration| DEV[Network_Devices]</code></pre> <p>* The Data Aggregation API will be able to get and merge data from other data sources once a plugin system will be in place.</p>"},{"location":"#network-cmdb","title":"Network CMDB","text":"<p>The Network CMDB contains data relative to the business and is completely agnostic to the network OS.</p> <p>The models are designed to describe the objects themselves rather than the configuration from device perspective. The idea is also to avoid any data duplication which could lead to configuration mismatches.</p> <p>For instance, we represent the BGP session itself with two joined tables describing peers: <code>DeviceBGPSession</code> &lt;==&gt; <code>BGPSession</code> &lt;==&gt; <code>DeviceBGPSession</code></p> <ul> <li><code>DeviceBGPSession</code> contains the <code>local-as</code> but not the <code>peer-as</code>, avoiding data duplication. The <code>peer-as</code> being the <code>local-as</code> of the other neighbor.</li> <li><code>BGPSession</code> contains all information peers have in common, like status (<code>in production</code>, <code>maintenance</code> etc...) or <code>MD5 password</code>.</li> </ul>"},{"location":"#data-aggregation-api","title":"Data Aggregation API","text":"<p>This API aggregates data from their sources of truth: the Network CMDB or possibly any other data source you may have.</p> <p>Then, it computes this data to provide OpenConfig JSON for each device as an output.</p> <p>ygot is used to validate the output against the OpenConfig YANG models.</p>"},{"location":"#saltstack-modules","title":"SaltStack modules","text":"<p>Our AFK Salt modules takes OpenConfig data and converts it as Network configuration. We are using templates to do that.</p> <p>The end goal is to simply forward this OpenConfig data to the Network OS to apply the configuration. Currently, OpenConfig is, at best, partially implemented in Network Operating Systems.</p>"},{"location":"FAQ/","title":"FAQ","text":""},{"location":"FAQ/#how-to-decommission-an-entire-device","title":"How to decommission an entire device?","text":"<p>For now, the mantra is: create your own Salt State to decommission.</p> <p>We do have an optional removal feature, but with some safeguards.</p> <p>As of today, we think decommissioning should be handled in different Salt States and modules than provisioning.</p>"},{"location":"FAQ/#what-part-is-device-agnostic-and-what-is-not","title":"What part is device-agnostic, and what is not?","text":"<p>The only part of the stack which is not agnostic is SaltStack.</p> <p>The job of Salt is to convert agnostic data coming from Data Aggregation API to a configuration the devices understand. So, the data in the NetBox CMDB and the Data Aggregation API must be completely agnostic, with nothing specific to a Network OS.</p> <p>If we did not do that, Salt could try to push a configuration which would not be appropriate for the device.</p> <p>Note</p> <p>In the future, the Data Aggregation API might no longer be device-agnostic because of interface naming. More info to come.</p>"},{"location":"FAQ/#what-if-i-have-a-use-case-which-is-not-covered-by-openconfig","title":"What if I have a use case which is not covered by OpenConfig?","text":"<p>You should follow these general rules:</p> <ul> <li>Ask yourself: is my use case really necessary? Or can I adapt?</li> <li>Try to find a configuration which is supported by OpenConfig.</li> <li>If your workflow is really a needed corner case:<ol> <li>Create a dedicated plugin in NetBox.</li> <li>Create a dedicated plugin in the Data Aggregation API (feature not yet available) to provide a separate custom model.</li> <li>Create a dedicated Salt State for your use case.</li> <li>Ensure you have the necessary safeguards to prevent your configuration from being removed by another Salt State.</li> </ol> </li> </ul> <p>See also Data-Aggregation-API.</p>"},{"location":"FAQ/#some-network-os-requires-extra-configuration-for-a-service-where-do-i-put-that","title":"Some Network OS requires extra configuration for a service, where do I put that?","text":"<p>You are perfectly allowed to duplicate/convert an object if needed.</p> <p>For instance, depending on the Network OS, PBR sometimes requires an ACL and sometimes a route-map. If it is doable, do that conversion in the Salt module and/or in the template.</p>"},{"location":"FAQs/","title":"FAQs","text":"<p>The FAQs are divided per section to make it more digest.</p> <ul> <li>Global FAQ</li> <li>CMDB FAQ</li> <li>SaltStack modules FAQ</li> </ul>"},{"location":"configuration-cleaning/","title":"Configuration cleaning","text":""},{"location":"configuration-cleaning/#current-status","title":"Current status","text":"<p>For now, AFK provides a partial configuration removal feature. It is not enabled by default.</p> <p>We do not advise enabling it, as it has not been battle-tested yet. If you still want to use it, please be careful and run tests in your lab first!</p>"},{"location":"configuration-cleaning/#target","title":"Target","text":"<p>The target is to manage the configuration like any Configuration Management Software, e.g. Chef.</p> <p>The system maintains the desired state but will not remove extra configuration. For instance, when you maintain the configuration of a server with Chef, it will never remove an extra package installed by a user. This is the same here. If you add manually a protocol which is not supported by AFK, like OSPF, it will not remove it. Meanwhile, BGP sessions are maintained by AFK, so extra BGP session can be removed.</p> <p>We do not want to give too much power to the CMDB, which hosts the source of truth of what should be on the device. We do not want to remove all BGP sessions if someone removes the wrong device in NetBox.</p> <p>This is why we have already implemented safeguards and will continue to do so.</p> <p>Some examples:</p> <ul> <li>BGP: keep a minimum of uplinks up and/or authorize the removal of down BGP sessions only.</li> <li>Route maps: only authorize the removal of unused route maps.</li> <li>No data at all for the device: do nothing. The device decommission process should be handled either manually or via a dedicated tooling/script.</li> </ul>"},{"location":"features/","title":"Features","text":""},{"location":"features/#legend","title":"Legend","text":"<ul> <li> supported</li> <li> work in progress</li> <li> in the roadmap</li> <li> will probably not be implemented</li> </ul>"},{"location":"features/#bgp","title":"BGP","text":"Features SONiC JunOS EOS Global configuration Peers: IPv4 unicast and IPv6 unicast Peers: EVPN Peer Groups (deprecated)"},{"location":"features/#routing-policy","title":"Routing Policy","text":"Features SONiC JunOS EOS Route maps Community lists Prefix lists Extended communities Large communities"},{"location":"features/#interfaces","title":"Interfaces","text":"Features SONiC JunOS EOS Physical interface Logical interface"},{"location":"features/#routing-and-switching","title":"Routing and switching","text":"Features SONiC JunOS EOS VRF VLAN"},{"location":"features/#system","title":"System","text":"Features SONiC JunOS EOS SNMP Syslog TACACS Users SSH <p>Info</p> <p>SSH support will probably not be added because we consider it to be part of a minimal configuration which must be configured on the device during bootstrap (via ZTP or manual).</p>"},{"location":"installation/","title":"Installation","text":"Component How to install NetBox https://docs.netbox.dev/en/stable/installation/ Data Aggregation API see our Installation guide SaltStack https://docs.saltproject.io/salt/install-guide/en/latest/ SaltStack for JunOS/EOS proxy-minion with napalm driver SaltStack for SONiC see our SONiC Salt Deployer and our AFK modules for SaltStack <p>Note</p> <p>If you are not familiar with NetBox and SaltStack, you should look at their awesome documentation prior to trying AFK:</p> <ul> <li>https://docs.netbox.dev/</li> <li>https://docs.saltproject.io/salt/user-guide/</li> </ul> <p>Info</p> <p>We plan to provide a script to deploy a development environment. You will be able to inspire yourself from this to deploy to production.</p>"},{"location":"monitoring/","title":"Monitoring","text":"<p>Warning</p> <p> This page is under construction.</p>"},{"location":"provisioning/","title":"Provisioning","text":""},{"location":"provisioning/#bootstrap-your-devices","title":"Bootstrap your devices","text":"<p>For now, AFK does not provide any way to generate bootstrap configuration.</p> <p>The advised workflow is the following:</p> <ol> <li>Generate the minimal configuration to be able to access the device.</li> <li>Apply the minimal ZTP (or manually).</li> <li>Use AFK to apply the rest of the configuration.</li> </ol> <p>The minimal configuration cannot be generated by Salt as it requires a salt-minion for the device.</p> <p>You could use Python scripts for instance to generate them, host the minimal configuration files on a server and serve them via your ZTP process.</p> <p>One alternative would be to rely on the default configuration of your devices. But this depends on the Network OS used.</p> <p>Note</p> <p>We think this minimal configuration should not be maintained by AFK to avoid losing the access in case of misconfiguration in the CMDB.</p>"},{"location":"provisioning/#use-provisioners","title":"Use Provisioners","text":"<p>The provisioner is where your business logic is located.</p> <p>It can take many forms. At Criteo we have two kinds:</p> <ul> <li><code>one shot provisioner</code> provisions the CMDB to have a fully operational datacenter.</li> <li><code>service provisioner</code> provisions the CMDB on demand. It allows your internal clients to dynamically benefit from network services, like BGP as a service.</li> </ul>"},{"location":"provisioning/#apply-the-changes","title":"Apply the changes","text":"<p>Here you have two options:</p> <ul> <li> <code>not so AFK</code>: just run the SaltStack State manually via the <code>salt &lt;device&gt; state.apply afk</code> command</li> <li> <code>real AFK</code>: create a schedule to automatically apply the configuration</li> </ul>"},{"location":"CMDB/FAQ/","title":"FAQ","text":""},{"location":"CMDB/FAQ/#why-not-use-existing-models-from-netbox","title":"Why not use existing models from NetBox?","text":"<p>NetBox is a great tool to manage your DCIM and IPAM.</p> <p>Our CMDB models directly use the DCIM and IPAM models, like <code>Device</code> and <code>IP prefixes</code>.</p> <p>NetBox also includes several models which could be considered as CMDB such as <code>VLAN</code>, <code>VRF</code> and <code>L2VPN</code>. We do not want to use these models to avoid confusion and design mismatches with our CMDB.</p>"},{"location":"CMDB/FAQ/#why-not-implement-directly-openconfig-models-in-the-cmdb","title":"Why not implement directly OpenConfig models in the CMDB?","text":"<p>OpenConfig models are designed from a device perspective.</p> <p>Our CMDB models are designed from a service/asset perspective. It allows us to apply common parameters without worrying of applying them at both ends.</p> <p>Example: we can directly set a maintenance status on a BGP session.</p> <p>It also allows us to limit redefinition of values that can lead to misconfiguration. For instance, in OpenConfig nothing prevents us from having a mismatch of ASN in a BGP session. In our CMDB, it cannot happen as the BGP session is the central object which links two devices, hence the neighbor A remote-as is the neighbor B local-as.</p>"},{"location":"CMDB/FAQ/#is-it-perfect-and-completely-generic","title":"Is it perfect and completely generic?","text":"<p>No </p> <p>It will not cover all use cases, but we will bring more features.</p> <p>The CMDB models come from opinionated choices aiming to simplify the implementation.</p> <p>Also, we do not aim to have a factorized configuration.</p>"},{"location":"CMDB/FAQ/#why-is-max-prefixes-configured-at-the-top-level-of-the-neighbor-and-not-in-a-safi","title":"Why is max-prefixes configured at the top level of the neighbor and not in a SAFI?","text":"<p>This is due to an EOS limitation. It cannot set the max prefix at SAFI level:</p> <pre><code>device.lab(config)#router bgp 65000\n\ndevice.lab(config-router-bgp)#neighbor 100.64.1.0 maximum-routes ?\n  &lt;0-4294967294&gt; Maximum number of routes (0 means unlimited)\n\ndevice.lab(config-router-bgp)#address-family ipv4\n\ndevice.lab(config-router-bgp-af)#neighbor 100.64.1.0 ?\n  activate Activate neighbor in the address family\n  additional-paths BGP additional-paths commands\n  default-originate Advertise a default route to this peer\n  graceful-restart Enable graceful restart mode\n  next-hop Next-hop address-family configuration\n  next-hop-unchanged Preserve original nexthop while advertising routes to eBGP peers\n  prefix-list Prefix list reference\n  route-map Name a route map\n  weight Assign weight for routes learnt from this peer\n</code></pre>"},{"location":"CMDB/FAQ/#why-is-there-no-permitdeny-field-in-community-lists-and-prefix-lists","title":"Why is there no permit/deny field in community-lists and prefix-lists?","text":"<p>While some devices provides a <code>permit/deny</code> field to a community/prefix-list, other Network OS like JunOS does not. More importantly, OpenConfig does not have it either.</p> <p>If you are currently using <code>permit/deny</code>, we suggest you to adapt your route-map instead.</p> <p>Example</p> <p>You should migrate from: <pre><code>ip prefix-list FANCY_PREFIX_LIST 10 deny 10.0.0.0/24\nip prefix-list FANCY_PREFIX_LIST 20 permit 10.0.0.0/8 le 32\n\nroute-map RM-TEST-IN 5 permit\n  match ip prefix-list FANCY_PREFIX_LIST\n</code></pre></p> <p>to: <pre><code>ip prefix-list FANCY_PREFIX_LIST 10 permit 10.0.0.0/24\nip prefix-list ANOTHER_FANCY_PREFIX_LIST 20 permit 10.0.0.0/8 le 32\n\nroute-map RM-TEST-IN 5 deny\n  match ip prefix-list FANCY_PREFIX_LIST\n\nroute-map RM-TEST-IN 10 permit\n  match ip prefix-list ANOTHER_FANCY_PREFIX_LIST\n</code></pre></p>"},{"location":"CMDB/FAQ/#why-cannot-a-route-map-filter-on-safi-while-openconfig-permits-it","title":"Why cannot a route-map filter on SAFI while OpenConfig permits it?","text":"<p>The issue here is coming from implementation differences between JunOS and EOS/FRR:</p> <ul> <li> <p>In JunOS, this should be done using <code>afi-safi-in</code> in routing-policy (applying a route-map in a specific SAFI in BGP configuration is not possible):   <code>route-map-&gt;term-&gt;from-&gt;safi</code></p> </li> <li> <p>In EOS/FRR, this should be done in BGP config (<code>afi-safi-in</code> in routing-policy is not supported):   <code>bgp-&gt;neighbor-&gt;safi-&gt;route-map</code></p> </li> </ul> <p>Authorizing both methods could lead to conflicts.</p> <p>Example</p> <p>If we set the following configuration in the CMDB:</p> <pre><code>route-map RM-TEST\n    term 10\n        from afi-safi-in ipv4_unicast\n\nrouter bgp\n    neighbor toto\n    address-family ipv6 unicast\n        route-map out RM-TEST\n</code></pre> <ul> <li>JunOS would only consider ipv4_unicast parameter</li> <li>EOS/FRR would only consider ipv6_unicast parameter</li> </ul> <p>We would end up with a route-map with different meanings depending on the network OS.</p> <p>We decided to not support <code>afi-safi-in</code> in routing-policy to simplify and reduce risk.</p>"},{"location":"CMDB/FAQ/#do-we-support-route-maps-applied-in-a-specific-safi-and-globally","title":"Do we support route-maps applied in a specific SAFI and globally?","text":"<p>Yes.</p> <ul> <li>EOS: can set up different route-maps at both peer and SAFI level.</li> <li>FRR: can only set up route-map at SAFI level.<ul> <li>However, our Salt implementation uses a fallback mechanism:<ul> <li>A route-map defined at the SAFI level has the highest priority.</li> <li>If there is no route-map at the SAFI level, then it applies the route-map provided at the peer level (if it exists).</li> </ul> </li> </ul> </li> <li>JunOS: does not permit having different route-map depending on the SAFI. A route-map is applied on all SAFI the neighbor is in. However, we have implemented a workaround at Salt level:<ul> <li>Salt duplicates the route-maps for all SAFI.</li> <li>It associates the right route-map to the neighbor depending on which SAFI it is in.</li> </ul> </li> </ul> <p>JunOS example</p> <pre><code># we create duplicates per SAFI, adding \"from family &lt;safi&gt;\" in each term:\nset policy-options policy-statement AUTOGENERATED::RM-TEST:IPV4_UNICAST term 10 from family inet\n...\n\nset policy-options policy-statement AUTOGENERATED::RM-TEST:IPV6_UNICAST term 10 from family inet6\n...\n\n# then we apply the one matching the SAFI used in the CMDB neighbor configuration (bgp-&gt;neighbor-&gt;address-family-&gt;route-map)\nset routing-instance prod protocols bgp group TEST neighbor 192.0.2.1 export [AUTOGENERATED::RM-TEST:IPV4_UNICAST]\n</code></pre>"},{"location":"CMDB/FAQ/#why-is-send-community-not-implemented","title":"Why is send-community not implemented?","text":"<p>For two reasons:</p> <ul> <li>We do not see the added value to have this option as it is enabled by default on most Network OS.</li> <li>Some OS like JunOS do not have such implementation: in that case, communities must be deleted in the route-map.</li> </ul> <p>Adding it would make the Salt templates more complex because sometimes it would be directly in the BGP configuration, sometimes it would imply the creation of a route-map.</p> <p>Additionally, it would make route-policies and BGP states more tightly coupled.</p>"},{"location":"CMDB/FAQ/#why-are-peer-groups-deprecated-not-supported","title":"Why are peer-groups deprecated / not supported?","text":"<p>Because peer-groups bring a lot of complexity and risks, especially because of FRR.</p> <p>In FRR, for sessions being in a peer-group:</p> <ul> <li>The peer-group remote-as is not mandatory, therefore the neighbors must have a remote-as.</li> <li>If the peer-group has a remote-as, the neighbors in the peer-group cannot have a remote-as explicitly.</li> </ul> <p>some of the issues we found in FRR</p> <p>When the neighbor is in a peer-group and the remote-as is set at neighbor level only:</p> <ul> <li>Removing the neighbor of a peer-group removes entirely the neighbor.</li> <li>Setting the remote-as at the peer-group level breaks BGP sessions which do not have the same remote-as.</li> <li>Changing the peer-group of a neighbor is impossible: <code>error: \u201cCannot change the peer-group. Deconfigure first\u201d</code></li> </ul> <p>When the neighbor is in a peer-group and the remote-as is set at the peer-group level only:</p> <ul> <li>Changing the remote-as of a single neighbor is not possible.</li> <li>Removing the remote-as of the peer-group removes the entire peer-group configuration and its neighbors.</li> </ul> <p>There are other issues, and we did not even talk about the difference with the other Network OS...</p>"},{"location":"CMDB/FAQ/#questions-about-deprecated-features","title":"Questions about deprecated features","text":"expand..."},{"location":"CMDB/FAQ/#why-do-peer-groups-not-have-maximum-prefixes","title":"Why do peer-groups not have maximum-prefixes?","text":"<ul> <li>OpenConfig: <code>maximum-prefixes</code> can only be set at the SAFI level</li> <li>FRR: only in SAFI</li> <li>EOS: only at the peer/peer-group level</li> <li>JunOS: only in SAFI</li> </ul> <p>Because of EOS, the <code>maximum-prefixes</code> field in the CMDB is set at the peer/peer-group level too. Then, the Data Aggregation API duplicates the value for each <code>maximum-prefixes</code> set.</p> <p>We could force the <code>maximum-prefixes</code> for each SAFI whether they are enabled or not. But in JunOS it would mean enabling all the SAFIs for the peer-group.</p> <p>So it is easier to enable this option only at the peer level, as the peer must be in a SAFI to work.</p>"},{"location":"CMDB/FAQ/#why-dont-we-support-safi-in-peer-groups","title":"Why don't we support SAFI in peer-groups?","text":"<p>Because of FRR:</p> <ul> <li>Neighbor de/activation in a SAFI is ignored if its peer-group is de/activated in this SAFI.</li> <li>When removing a SAFI from peer-group, the neighbor\u2019s SAFI changes.</li> <li>When a neighbor\u2019s SAFI list changes, the BGP session is reset.</li> </ul> <p>For retro-compatibility purposes, we do not manage the statement <code>no neighbor &lt;peer-group&gt; activate</code>. Meaning, if it is added manually, it will not be removed.</p>"},{"location":"CMDB/FAQ/#why-is-the-remote-as-mandatory-in-the-peer-groups-and-why-must-it-have-the-same-remote-as-than-its-neighbor","title":"Why is the remote-as mandatory in the peer-groups, and why must it have the same remote-as than its neighbor?","text":"<p>Warning</p> <p>To ease migration, our Salt template for SONiC supports peer-groups without remote-as.</p> <p>All these restrictions come from FRR. In FRR, we cannot setup the remote-as at both peer-group and neighbor level.</p> <p>It means that the peer-group remote-as MUST match with all its neighbors remote-as. Otherwise, the CMDB would not reflect what would really be applied to the device.</p> <p>TL;DR</p> <ul> <li>Cannot have a remote-as set on both neighbor and its peer-group (error message: % Peer-group member cannot override remote-as of peer-group).</li> <li>Migrating remote-as from neighbor to peer-group works, without BGP reset.</li> <li>Migrating remote-as from peer-group to neighbor does not work. The neighbor gets deleted and recreated.</li> </ul> <p>Note: for local-as the behavior is different:</p> <ul> <li>Both neighbor and peer-group can have a local-as set, different or the same.</li> <li>On both neighbor and peer-group: we cannot set the same local-as as the global-as (error message: % Cannot have local-as same as BGP AS number).</li> </ul> <pre><code>router bgp 65000\n    neighbor PG-L3_RA local-as 65000\n% Cannot have local-as same as BGP AS number\n\n    neighbor 192.0.2.1 local-as 65001\n    neighbor 192.0.2.1 local-as 65000\n% Cannot have local-as same as BGP AS number\n    neighbor 192.0.2.1 local-as 65002\n</code></pre>"},{"location":"CMDB/endpoints/","title":"Endpoints","text":""},{"location":"CMDB/endpoints/#asns","title":"ASNs","text":"<p>Endpoint: <code>/api/plugins/cmdb/asns/</code></p> <p>Provides all available ASN.</p> Example <pre><code>{\n\"results\": [\n{\n\"id\": 1,\n\"created\": \"2022-09-28T12:28:52.112949Z\",\n\"last_updated\": \"2022-09-28T12:28:52.112978Z\",\n\"organization_name\": \"Paris\",\n\"number\": 65000\n}\n]\n}\n</code></pre>"},{"location":"CMDB/endpoints/#bgp-global","title":"BGP Global","text":"<p>Endpoint: <code>/api/plugins/cmdb/bgp-global/</code></p> <p>Provides the BGP global configuration for each device.</p> Example <pre><code>TODO\n</code></pre>"},{"location":"CMDB/endpoints/#bgp-sessions","title":"BGP sessions","text":"<p>Endpoint: <code>/api/plugins/cmdb/bgp-sessions/</code></p> <p>Provides all BGP sessions.</p> Example <pre><code>{\n\"results\": [\n{\n\"id\": 1,\n\"peer_a\": {\n\"id\": 1,\n\"local_address\": {\n\"id\": 1234,\n\"url\": \"https://netbox.local/api/ipam/ip-addresses/1234/\",\n\"display\": \"192.0.2.16/31\",\n\"family\": 4,\n\"address\": \"192.0.2.16/31\"\n},\n\"device\": {\n\"id\": 123,\n\"name\": \"tor1\"\n},\n\"local_asn\": {\n\"id\": 1,\n\"number\": 65000,\n\"organization_name\": \"Criteo-65000\"\n},\n\"afi_safis\": [\n{\n\"id\": 217,\n\"route_policy_in\": null,\n\"route_policy_out\": null,\n\"afi_safi_name\": \"ipv4-unicast\"\n}\n],\n\"route_policy_in\": null,\n\"route_policy_out\": null,\n\"created\": \"2022-11-07T16:57:33.848779Z\",\n\"last_updated\": \"2022-11-07T16:57:33.848795Z\",\n\"description\": \"to-spine1\",\n\"enforce_first_as\": true,\n\"maximum_prefixes\": 10000\n},\n\"peer_b\": {\n\"id\": 218,\n\"local_address\": {\n\"id\": 22,\n\"url\": \"https://netbox.local/api/ipam/ip-addresses/22/\",\n\"display\": \"192.0.2.17/31\",\n\"family\": 4,\n\"address\": \"192.0.2.17/31\"\n},\n\"device\": {\n\"id\": 345,\n\"name\": \"spine1\"\n},\n\"local_asn\": {\n\"id\": 10,\n\"number\": 65001,\n\"organization_name\": \"Criteo-65001\"\n},\n\"afi_safis\": [\n{\n\"id\": 2,\n\"route_policy_in\": null,\n\"route_policy_out\": null,\n\"afi_safi_name\": \"ipv4-unicast\"\n}\n],\n\"route_policy_in\": null,\n\"route_policy_out\": null,\n\"created\": \"2022-11-07T16:57:33.853487Z\",\n\"last_updated\": \"2022-11-07T16:57:33.853500Z\",\n\"description\": \"to-tor1\",\n\"enforce_first_as\": true,\n\"maximum_prefixes\": 10000\n},\n\"tenant\": null,\n\"created\": \"2022-11-07T16:57:33.856145Z\",\n\"last_updated\": \"2022-11-07T16:57:33.856156Z\",\n\"status\": \"active\",\n\"password\": \"\",\n\"circuit\": null\n},\n]\n}\n</code></pre>"},{"location":"CMDB/endpoints/#prefix-lists","title":"Prefix lists","text":"<p>Endpoint: <code>/api/plugins/cmdb/prefix-lists/</code></p> <p>Provides the prefix lists for each device.</p> Example <pre><code>{\n\"results\": [\n{\n\"id\": 129,\n\"name\": \"PF-ANY_IPV6\",\n\"device\": {\n\"id\": 1,\n\"name\": \"tor1\"\n},\n\"ip_version\": \"ipv6\",\n\"terms\": [\n{\n\"sequence\": 10,\n\"decision\": \"permit\",\n\"prefix\": \"::/0\",\n\"le\": 128,\n\"ge\": null\n}\n]\n},\n]\n}\n</code></pre>"},{"location":"CMDB/endpoints/#bgp-community-lists","title":"BGP community lists","text":"<p>Endpoint: <code>/api/plugins/cmdb/bgp-community-lists/</code></p> <p>Provides the BGP community lists for each device.</p> Example <pre><code>{\n\"results\": [\n{\n\"id\": 1,\n\"device\": {\n\"id\": 1,\n\"name\": \"tor1\"\n},\n\"terms\": [\n{\n\"sequence\": 10,\n\"decision\": \"permit\",\n\"community\": \"65000:10000\"\n}\n],\n\"created\": \"2022-07-28T13:37:05.699938Z\",\n\"last_updated\": \"2022-07-28T13:37:05.699968Z\",\n\"name\": \"CL-SERVER\"\n}\n]\n}\n</code></pre>"},{"location":"CMDB/endpoints/#route-policies","title":"Route policies","text":"<p>Endpoint: <code>/api/plugins/cmdb/route-policies/</code></p> <p>Provides the route maps for each device.</p> Example <pre><code>{\n\"results\": [\n{\n\"id\": 129,\n\"name\": \"RM-UPLINK-IN\",\n\"device\": {\n\"id\": 123,\n\"name\": \"tor1\"\n},\n\"description\": \"tor1:uplink-in\",\n\"terms\": [\n{\n\"description\": \"\",\n\"sequence\": 10,\n\"decision\": \"permit\",\n\"from_bgp_community\": \"\",\n\"from_bgp_community_list\": null,\n\"from_prefix_list\": {\n\"id\": 129,\n\"device\": 123,\n\"name\": \"PF-ANY_IPV6\"\n},\n\"from_source_protocol\": \"\",\n\"from_route_type\": \"\",\n\"from_local_pref\": null,\n\"set_local_pref\": null,\n\"set_community\": \"\",\n\"set_origin\": \"\",\n\"set_metric\": null,\n\"set_large_community\": \"\",\n\"set_as_path_prepend\": \"\",\n\"set_next_hop\": null\n},\n{\n\"description\": \"\",\n\"sequence\": 20,\n\"decision\": \"permit\",\n\"from_bgp_community\": \"\",\n\"from_bgp_community_list\": {\n\"id\": 1,\n\"device\": 123,\n\"name\": \"CL-SERVER\"\n},\n\"from_prefix_list\": null,\n\"from_source_protocol\": \"\",\n\"from_route_type\": \"\",\n\"from_local_pref\": null,\n\"set_local_pref\": null,\n\"set_community\": \"\",\n\"set_origin\": \"\",\n\"set_metric\": null,\n\"set_large_community\": \"\",\n\"set_as_path_prepend\": \"\",\n\"set_next_hop\": null\n},\n{\n\"description\": \"\",\n\"sequence\": 30,\n\"decision\": \"deny\",\n\"from_bgp_community\": \"\",\n\"from_bgp_community_list\": null,\n\"from_prefix_list\": null,\n\"from_source_protocol\": \"\",\n\"from_route_type\": \"\",\n\"from_local_pref\": null,\n\"set_local_pref\": null,\n\"set_community\": \"\",\n\"set_origin\": \"\",\n\"set_metric\": null,\n\"set_large_community\": \"\",\n\"set_as_path_prepend\": \"\",\n\"set_next_hop\": null\n}\n]\n}\n]\n}\n</code></pre>"},{"location":"CMDB/installation/","title":"Installation","text":""},{"location":"CMDB/installation/#existing-netbox-instance","title":"Existing NetBox instance","text":"<p>This is simple:</p> <ol> <li>Download the <code>network_cmdb</code> plugin from the criteo/netbox-network-cmdb repository.</li> <li>Place the directory in your NetBox instance.</li> <li>Open the <code>netbox/configuration.py</code> file and add <code>netbox_cmdb</code> in the <code>PLUGINS</code> list.</li> <li>Restart your NetBox instance.</li> </ol>"},{"location":"CMDB/installation/#from-scratch","title":"From scratch","text":"<p>You can have a look at the <code>docker-compose.yml</code> and the other scripts in the develop directory.</p> <ul> <li>For development/test, simply run <code>make start</code> from the Network CMDB repository.</li> <li>For production, please ensure to integrate it properly to your environment.</li> </ul>"},{"location":"CMDB/installation/#access-the-ui","title":"Access the UI","text":"<p>For now, there are no CMDB components in NetBox UI. It will be added later.</p> <p>In the meantime you can access the CMDB in the Django Admin UI: http://127.0.0.1:8000/admin/</p>"},{"location":"CMDB/models/BGP/","title":"BGP","text":""},{"location":"CMDB/models/BGP/#source-code","title":"Source code","text":"<p>Models location: netbox_cmdb/models/bgp.py</p>"},{"location":"CMDB/models/BGP/#table-relations","title":"Table relations","text":"<p>Info</p> <p>To simplify the diagram, not all relations are displayed (example: <code>DeviceBGPSession</code> =&gt; <code>IPAM.IPAddress</code>)</p> <pre><code>erDiagram\n\n    dcim_Device 1--1 BGPGlobal: \"\"\n    dcim_Device 1--0+ BGPSession: \"\"\n    BGPSession 1--1+ DeviceBGPSession: \"\"\n    DeviceBGPSession 1--0+ AfiSafi: \"\"\n    DeviceBGPSession 1--0+ RoutePolicy: \"\"\n    AfiSafi 1--0+ RoutePolicy: \"\"</code></pre>"},{"location":"CMDB/models/BGP/#bgp-global-configuration","title":"BGP global configuration","text":"<pre><code>BGPGlobal:\ndevice: dcim.Device\nlocal_asn: cmdb.ASN\nrouter_id: string\nebgp_administrative_distance: integer\nibgp_administrative_distance: integer\ngraceful_restart: boolean\ngraceful_restart_time: integer\necmp: boolean\necmp_maximum_paths: integer\n</code></pre> <pre><code>ASN:\norganization_name: string\nnumber: integer\n</code></pre>"},{"location":"CMDB/models/BGP/#bgp-sessions","title":"BGP sessions","text":"<p>The implementation for BGP sessions is more complex.</p> <p>The main idea is to have a <code>BGPSession</code> linked to two <code>DeviceBGPSession</code> to avoid data duplication such as <code>local-asn</code> vs <code>remote-asn</code>.</p> <p>Info</p> <p>As we have deprecated the usage of peer-groups, we do not document the model here.</p> <pre><code>BGPSession:\nstatus: boolean\npeer_a: cmdb.DeviceBGPSession\npeer_b: cmdb.DeviceBGPSession\npassword: string\ncircuit: cmdb.Circuit\ntenant: dcim.Tenant\n</code></pre> <pre><code>DeviceBGPSession:\ndevice: dcim.Device\ndescription: string\nlocal_address: netbox.ipam.IPAddress\nremote_asn: cmdb.ASN\npeer_group: cmdb.PeerGroup (deprecated)\nmaximum_prefixes: integer\nroute_policy_in: cmdb.RoutePolicy\nroute_policy_out: cmdb.RoutePolicy\nenforce_first_as: boolean (not used yet)\n</code></pre> <pre><code>AfiSafi:\ndevice: dcim.Device\nroute_policy_in: cmdb.RoutePolicy\nroute_policy_out: cmdb.RoutePolicy\ndevice_bgp_session: cmdb.DeviceBGPSession\n</code></pre>"},{"location":"CMDB/models/Routing-Policies/","title":"Routing Policies","text":""},{"location":"CMDB/models/Routing-Policies/#source-code","title":"Source code","text":"<p>Models locations:</p> <ul> <li>netbox_cmdb/models/prefix_list.py</li> <li>netbox_cmdb/models/bgp_community_list.py</li> <li>netbox_cmdb/models/route_policy.py</li> </ul>"},{"location":"CMDB/models/Routing-Policies/#table-relations","title":"Table relations","text":"<pre><code>erDiagram\n\n    dcim_Device 1--0+ RoutePolicy: \"\"\n    RoutePolicy 1--0+ RoutePolicyTerm: \"\"\n    RoutePolicyTerm 0+--o| BgpCommunityList: \"\"\n    RoutePolicyTerm 0+--o| PrefixList: \"\"\n    BgpCommunityList 1--0+ BgpCommunityListTerm: \"\"\n    PrefixList 1--0+ PrefixListTerm: \"\"\n</code></pre>"},{"location":"CMDB/models/Routing-Policies/#prefix-lists","title":"Prefix lists","text":"<pre><code>PrefixList:\nname: string\ndevice: dcim.Device\nip_version: string choices\n</code></pre> <pre><code>PrefixListTerm:\nprefix_list: cmdb.PrefixList\nsequence: integer\ndecision: string choices\nprefix: IPNetwork\nle: integer\nge: integer\n</code></pre>"},{"location":"CMDB/models/Routing-Policies/#community-lists","title":"Community lists","text":""},{"location":"CMDB/models/Routing-Policies/#_1","title":"Routing Policies","text":"<pre><code>BGPCommunityList:\nname: string\ndevice: dcim.Device\n</code></pre> <pre><code>BGPCommunityListTerm:\nbgp_community_list: cmdb.BGPCommunityList\nsequence: integer\ndecision: string choices\ncommunity: string\n</code></pre>"},{"location":"CMDB/models/Routing-Policies/#route-policies","title":"Route policies","text":"<pre><code>RoutePolicy:\nname: string\ndevice: dcim.Device\ndescription: string\n</code></pre> <pre><code>RoutePolicyTerm:\nroute_policy: cmdb.RoutePolicy\ndescription: string\nsequence: integer\ndecision: string choices\n# match\nfrom_bgp_community: string\nfrom_bgp_community_list: cmdb.BgpCommunityList\nfrom_prefix_list: cmdb.PrefixList\nfrom_source_protocol: string\nfrom_route_type: string\nfrom_local_pref: integer\n# set\nset_local_pref: integer\nset_community: string\nset_origin: string\nset_metric: integer\nset_large_community: string\nset_as_path_prepend: string\nset_next_hop: IPaddress\n</code></pre>"},{"location":"Data-Aggregation-API/design/","title":"Design","text":""},{"location":"Data-Aggregation-API/design/#ingestors","title":"Ingestors","text":"<p>An ingestor is a component responsible for fetching data from a single source of truth. Most of the time it is querying a single endpoint.</p> <p>Examples of ingestor with their associated endpoints:</p> <ul> <li>BGPSessions: <code>/api/plugins/cmdb/bgp-sessions/</code></li> <li>RoutePolicies: <code>/api/plugins/cmdb/route-policies/</code></li> </ul>"},{"location":"Data-Aggregation-API/design/#precompute","title":"Precompute","text":"<p>The precompute step is responsible for extracting raw data per device. The goal is to be able to have all needed data to compute one device configuration.</p> <p>For instance, a <code>BGPSession</code> has two peers: <code>peer_a</code> and <code>peer_b</code>. The devices matching the peers will all have this <code>BGPSession</code> in their respective <code>raw_data</code>.</p> Example <p>Here is a simplified output of the <code>bgp-sessions</code> endpoint.</p> <pre><code>    {\n\"results\": [\n{\n\"peer_a\": {\n\"local_address\": {\n\"address\": \"192.0.2.16/31\"\n},\n\"device\": {\n\"name\": \"tor1\"\n},\n\"local_asn\": {\n\"number\": 65000,\n\"organization_name\": \"Criteo-65000\"\n},\n\"description\": \"to-spine1\",\n},\n\"peer_b\": {\n\"local_address\": {\n\"address\": \"192.0.2.17/31\"\n},\n\"device\": {\n\"name\": \"spine1\"\n},\n\"local_asn\": {\n\"number\": 65001,\n},\n\"description\": \"to-tor1\",\n},\n\"status\": \"active\",\n\"password\": \"thisisanincredibleandcomplexpassword:)\",\n}\n]\n}\n</code></pre> <p>The precompute will \"copy\" this structure for both devices:</p> <ul> <li><code>tor1.raw_data[\"bgp-session\"] = results[0]</code></li> <li><code>spine1.raw_data[\"bgp-session\"] = results[0]</code></li> </ul> <p>Thanks to this simple precompute part, <code>tor1</code> OpenConfig can be generated independently:</p> <pre><code>tor1.neighbor[0].local_as = tor1.raw_data[\"bgp-session\"].peer_a.local_asn\ntor1.neighbor[0].remote_as = tor1.raw_data[\"bgp-session\"].peer_b.local_asn\n...\n</code></pre> <p>this is pseudo-code just to explain the idea.</p>"},{"location":"Data-Aggregation-API/design/#convertors","title":"Convertors","text":"<p>This is where the magic happens. From the precomputed data, the Data Aggregation API generates OpenConfig configuration for each device.</p> <p>Thanks to ygot and OpenConfig YANG models, the Data Aggregation API has all the OpenConfig Go structures.</p> <ul> <li>OpenConfig structure is respected for sure.</li> <li>Logic is validated: if a neighbor refers to an undefined route policy, it will raise an error.</li> <li>Output: conversion to JSON RFC7951 is provided by ygot.</li> <li>All features from ygot can be implemented.</li> </ul>"},{"location":"Data-Aggregation-API/design/#reporting","title":"Reporting","text":"<p>Warning</p> <p> This section is under construction.</p>"},{"location":"Data-Aggregation-API/design/#endpoints","title":"Endpoints","text":"<p>Warning</p> <p> This section is under construction.</p>"},{"location":"Data-Aggregation-API/installation/","title":"Installation","text":"<p>Warning</p> <p> Open Source version not yet ready.</p>"},{"location":"Data-Aggregation-API/missing-features-in-openconfig/","title":"Missing features in OpenConfig","text":""},{"location":"Data-Aggregation-API/missing-features-in-openconfig/#context-and-approaches","title":"Context and approaches","text":"<p>OpenConfig models do not provide all existing network features.</p> <p>There are three approaches to this:</p> <ol> <li>Changing the way to configure the devices.<ul> <li>Sometimes this is not possible.</li> </ul> </li> <li>Augmenting the OpenConfig models.<ul> <li>Only if the feature cannot be implemented another way.</li> <li>This would only be temporary.</li> <li>A PR to OpenConfig is mandatory.</li> </ul> </li> <li>Doing a separate model.<ul> <li>This should only be a last resort.</li> </ul> </li> </ol> <p>Warning</p> <p>We want to stick with OpenConfig standard models.</p>"},{"location":"Data-Aggregation-API/missing-features-in-openconfig/#missing-features","title":"Missing features","text":""},{"location":"Data-Aggregation-API/missing-features-in-openconfig/#bgp","title":"BGP","text":"Feature Decision <code>enforce first-as</code> Migrate to a route-map like <code>match as-path &lt;asn&gt;</code>  being the AS of the neighbor. <code>network</code> <code>To be defined, maybe via route-maps</code> <code>soft reconfiguration inbound</code> <code>To be defined</code>"},{"location":"Data-Aggregation-API/missing-features-in-openconfig/#routing-policies","title":"Routing policies","text":"Feature Decision <code>large communities</code> Do a PR in OpenConfig repo decision in prefix-list: <code>permit</code> / <code>deny</code> All prefixes in prefix-lists are hardcoded as <code>permit</code>. The <code>deny</code> must be done at in the route-map. prefix-list sequence Hardcoded in the jinja loop"},{"location":"SONiC-support/Criteo-SONiC-utilities/","title":"Criteo SONiC utilities","text":""},{"location":"SONiC-support/Criteo-SONiC-utilities/#installation","title":"Installation","text":"<p>Our SONiC modules require some custom script to be installed:</p> <ul> <li><code>/opt/salt/scripts/criteo_fdbshow</code></li> <li><code>/opt/salt/scripts/criteo_intf_information</code></li> </ul> <p>These scripts are available in the Criteo SONiC utilities repository.</p> <p>You can use the provided Salt state to deploy them automatically. This state assumes some grains are properly set for each SONiC device:</p> <pre><code>hwsku: some-hardware\nnos: sonic\nsonic_asic_type: some-asic\nsonic_build_date: some-date\nsonic_build_version: 202205\nsonic_built_by: someone\nsonic_commit_id: some-commit-id\n</code></pre> <p>Tip</p> <p>The needed grains are automatically set by our SONiC Salt Deployer.</p>"},{"location":"SONiC-support/SONiC-Salt-Deployer/","title":"SONiC Salt deployer","text":"<p>This tool deploys and configures Salt-minions on SONiC devices.</p> <p>It includes:</p> <ul> <li>DNS server configuration</li> <li>Salt minion PEX</li> <li>Update grains script</li> <li>Systemd services / timers</li> </ul> <p>You can run it regularly. There will be no impact on already deployed devices. Only the needed changes will be made.</p>"},{"location":"SONiC-support/SONiC-Salt-Deployer/#prepare-your-environment","title":"Prepare your environment","text":"<pre><code>python3 -m venv .venv\nsource .venv/bin/activate\npip install -r requirements/base.txt\n</code></pre>"},{"location":"SONiC-support/SONiC-Salt-Deployer/#how-to-use-it","title":"How to use it","text":""},{"location":"SONiC-support/SONiC-Salt-Deployer/#settings","title":"Settings","text":"<p>See settings.env.</p> <p>There is also an example provided here.</p>"},{"location":"SONiC-support/SONiC-Salt-Deployer/#usage","title":"Usage","text":"<pre><code>pip install -r requirements/base.txt\npython ./start.py\n</code></pre> <p>Or build the PEX via <code>tox -e bundle</code> and run the executable.</p> <p>You can use this systemd service and its timer.</p>"},{"location":"SONiC-support/SONiC-modules/","title":"SONiC modules","text":""},{"location":"SONiC-support/SONiC-modules/#how-to-install","title":"How to install","text":"<p>The installation process is similar to SaltStack modules installation.</p> <ol> <li>Download the codebase to a dedicated path on your Salt-master.</li> <li>Add a new path to the <code>file_roots</code> section in the Salt-master configuration.</li> </ol> <p>Example of salt-master configuration:</p> <pre><code>file_roots:\nbase:\n# ... other paths ...\n# SONiC codebase:\n- /srv/salt/base/sonic/\n</code></pre> <p>Important</p> <p>Make sure to synchronize the modules with your minions:</p> <pre><code>salt &lt;device&gt; saltutil.sync_all\n</code></pre>"},{"location":"SONiC-support/overview/","title":"Overview","text":""},{"location":"SONiC-support/overview/#supported-versions","title":"Supported versions","text":"SONiC version Support 201911 202205 <p>Legend</p> <ul> <li> supported</li> <li> work in progress</li> <li> deprecated</li> <li> not supported</li> </ul>"},{"location":"SONiC-support/overview/#installation","title":"Installation","text":"Step Description Guide 1 Install <code>salt-minion</code> on your SONiC devices SONiC Salt Deployer section 2 Deploy <code>Criteo SONiC utilities</code> Criteo SONiC utilities section 3 Deploy our SONiC modules SONiC modules section 4 Deploy our Saltstack modules SaltStack-modules section <p>Important</p> <p>To benefit from all AFK features, you need to change FRR integration in SONiC.</p> <p>By default, the files in <code>/etc/frr</code> of the BGP container are generated from an embedded template combined with metadata from the <code>config_db</code>.</p> <p>AFK requires to directly mount <code>/etc/sonic/frr</code> from the host to <code>/etc/frr</code> on the BGP container.</p> <p>The change has been upstream starting 202205. To configure SONiC this way:</p> <ul> <li>for SONiC &lt; 202205, you need to apply our patch manually</li> <li>for SONiC &gt;= 202205, you need to enable split-unified</li> </ul>"},{"location":"SaltStack-modules/FAQ/","title":"FAQ","text":""},{"location":"SaltStack-modules/FAQ/#why-are-the-templates-minimalist-with-little-logic-and-no-inheritance","title":"Why are the templates minimalist, with little logic and no inheritance?","text":"<p>The idea is to have most of the logic in Salt modules.</p> <p>We want to avoid making Jinja templates more complex because:</p> <ul> <li>Jinja templates are difficult to read, maintain, debug and to add features.</li> <li>It makes more sense to handle most of the logic with a programming language rather than a template.</li> </ul> <p>As another rule, we only authorize two levels of indentation in the template. If you need more, split your templates.</p>"},{"location":"SaltStack-modules/FAQ/#state-modules-are-supposed-to-be-agnostic-why-not-use-execution-modules-to-handle-network-os-specificities","title":"State modules are supposed to be agnostic. Why not use Execution modules to handle Network OS specificities?","text":"<p>For now, it brings more complexity to create Execution modules to handle configuration differences.</p> <p>However, we do use Execution modules to get information from the device and to apply the configuration.</p>"},{"location":"SaltStack-modules/FAQ/#eossonic-why-negate-all-configuration-statements-instead-of-pushing-diffs-or-override-everything","title":"EOS/SONiC: why negate all configuration statements instead of pushing diffs or override everything?","text":"<p>Because not all Network OS provide a way to obtain a diff, e.g. SONiC/FRR.</p> <p>We cannot override the entire configuration because a section of the configuration might be managed by multiple Salt States. For instance one State manages the global BGP configuration, another manages the BGP sessions and a third one manages EVPN.</p> <p>Sometimes we do negate the entire section. We remove a route-map to recreate it entirely because it is safer and easier to do that: we ensure the route-map terms do not contain extra configuration we do not support.</p>"},{"location":"SaltStack-modules/FAQ/#what-is-the-behavior-of-sonic-bgp-configuration-if-something-bad-happens","title":"What is the behavior of SONiC BGP configuration if something bad happens?","text":"<p>If a command is incorrect, it is ignored by FRR and the rest of the configuration is applied. It returns errors in the output.</p> <p>Example</p> <pre><code>line 11: Failure to communicate[13] to zebra, line: ip prefix-list PF-LOOPBACK seq 10 permit 10.252.200.0/22 ge 22\n% Invalid prefix range for 10.252.200.0/22, make sure: len &lt; ge-value &lt;= le-value\n</code></pre> <p>If we attempt to remove a statement which is not present, it returns an error. But it still applies the rest of the configuration.</p> <p>Example</p> <pre><code>% Could not find route-map RM-CLOS-IN\nline 13: Failure to communicate[13] to zebra, line: no route-map RM-CLOS-IN\nThese are not caught by the dry-run feature of vtysh, which only checks if the config is semantica:ly correct.\n</code></pre>"},{"location":"SaltStack-modules/FAQ/#frr-is-not-offering-a-commit-based-configuration-yet-how-do-we-handle-this","title":"FRR is not offering a commit-based configuration yet, how do we handle this?","text":"<p>This part is complex. The future of FRR is clear: the Northbound API. We plan to use the future incremental feature via CLI or gRPC.</p> <p>In the meantime, AFK applies all changes in real time:</p> <ol> <li>Salt disables \"event-driven\" notifications to Zebra when there is a policy to update, using <code>bgp route-map delay-timer 0</code>.</li> <li>Changes are applied.</li> <li>\"Event-driven\" notifications to Zebra are re-enabled.</li> </ol> <p>Everything happens in a really short time as FRR pushes all lines in a simple <code>for loop</code> in C.</p>"},{"location":"SaltStack-modules/installation/","title":"Installation","text":"<p>Be careful</p> <ul> <li>These modules are under active development and subject to changes.</li> <li>The implementation is opiniated and might not be appropriate for your environment.</li> <li>You should always test new releases on your infrastructure before going to production.</li> </ul>"},{"location":"SaltStack-modules/installation/#how-to-install","title":"How to install","text":"<ol> <li>Download the codebase to a dedicated path on your Salt-master.</li> <li>Add a new path to the <code>file_roots</code> section in the Salt-master configuration.</li> </ol> <p>Example of salt-master configuration: <pre><code>file_roots:\nbase:\n# your own codebase:\n- /srv/salt/base/your-code-base/\n# OpenConfig codebase:\n- /srv/salt/base/openconfig/\n</code></pre></p> <p>Important</p> <p>Make sure to synchronize the modules with your minions:</p> <pre><code>salt &lt;device&gt; saltutil.sync_all\n</code></pre>"},{"location":"SaltStack-modules/installation/#dependencies","title":"Dependencies","text":"<p>Depending on the Network OS you want to support, you will need:</p> <ul> <li>SONiC modules</li> <li>napalm-salt for Juniper JunOS and Arista EOS</li> </ul>"},{"location":"SaltStack-modules/usage/","title":"Usage","text":""},{"location":"SaltStack-modules/usage/#setup-openconfig-pillar","title":"Setup OpenConfig pillar","text":"<p>To apply the configuration, you need the input data in OpenConfig format (JSON RFC7951).</p> <p>If you are using our Data Aggregation API, you can create the following pillar in <code>{SALT_PILLAR_PATH}/data-aggregation-api-openconfig.sls</code>:</p> <pre><code>#!py\nimport logging\nimport requests\nDATACENTER = \"paris\"\nENVIRONMENT = \"production\"\nUSER = \"salt-master\"\nPASSWORD = \"awesomepassword\"\nDATA_API = f\"https://data-aggregation-api.{DATACENTER}.{ENVIRONMENT}.local\"\ndef run():\n\"\"\"Get OpenConfig data for all devices.\"\"\"\ndevice = __grains__[\"id\"]\nopenconfig_endpoint = f\"{DATA_API}/devices/{device}/openconfig\"\ntry:\nresult = requests.get(openconfig_endpoint, auth=(USER, PASSWORD)).json()\nreturn {\"openconfig\": result}\nexcept Exception as error:\nlogging.error(\"data-aggregation-api: failed to query '%s' because %s\", openconfig_endpoint, error)\nreturn {}\n</code></pre>"},{"location":"SaltStack-modules/usage/#apply-the-configuration-manually","title":"Apply the configuration manually","text":"<ul> <li>Dry run: <code>salt &lt;device&gt; state.apply afk test=True</code></li> <li>Deploy: <code>salt &lt;device&gt; state.apply afk</code></li> </ul>"},{"location":"SaltStack-modules/usage/#schedule-configuration-deployment","title":"Schedule configuration deployment","text":"<p>Info</p> <p>These are examples. Make sure to adapt them to your infrastructure.</p> <p>Simple schedule in <code>{SALT_PILLAR_PATH}/schedule_simple_afk.sls</code></p> <pre><code>schedule:\nafk:\nfunction: state.sls\nargs:\n- afk\nminutes: 30\nrange:\nstart: 8am\nend: 7pm\n</code></pre> <p>Schedule only for devices having a <code>afk-enabled</code> tag in NetBox in <code>{SALT_PILLAR_PATH}/schedule_smart_afk.sls</code></p> <pre><code>#!py\nimport logging\nimport requests\nDATACENTER = \"paris\"\nENVIRONMENT = \"production\"\nUSER = \"salt-master\"\nPASSWORD = \"awesomepassword\"\nDATA_API = f\"https://data-aggregation-api.{DATACENTER}.{ENVIRONMENT}.local\"\ndef run():\n\"\"\"Get AFK afk-enabled data for all devices.\"\"\"\ndevice = __grains__[\"id\"]\nendpoint = f\"{DATA_API}/devices/{device}/salt_enabled\"\ntry:\nresult = requests.get(endpoint, auth=(USER, PASSWORD)).json()\nif result.get(\"salt_enabled\") is True:\nreturn {\n\"schedule\": {\n\"afk\": {\n\"function\": \"state.sls\",\n\"args\": [\"afk\"],\n\"minutes\": 30,\n\"range\": {\"start\": \"8am\", \"end\": \"7pm\"},\n}\n}\n}\nexcept Exception as error:\nlogging.error(\"data-aggregation-api: failed to query '%s' because %s\", endpoint, error)\nreturn {}\n</code></pre> <p>Attention</p> <p>If you are putting secrets directly in the pillar file, make sure to apply the appropriate permissions to the file. Something like <code>chmod 600</code>.</p>"}]}